import pytest
from solution import best_time_to_buy_sell_bruteforce, best_time_to_buy_sell_optimal

FUNCTIONS = [best_time_to_buy_sell_bruteforce, best_time_to_buy_sell_optimal]
# Параметры для тестов: (prices, expected, label)
# Базовые тесты (взяты из примеров LeetCode)
BASIC_CASES = [
    ([7, 1, 5, 3, 6, 4], 5, "базовый: пример с максимальной прибылью 5"),
    ([7, 6, 4, 3, 1], 0, "базовый: нет прибыли - возвращаем 0"),
    ([1, 2], 1, "базовый: минимальный случай с прибылью"),
    ([2, 1], 0, "базовый: минимальный случай без прибыли"),
]

# Расширенные тесты
EXTENDED_CASES = [
    ([3, 3, 5, 0, 0, 3, 1, 4], 4, "расширенный: повторяющиеся цены и нули"),
    ([1, 2, 3, 4, 5], 4, "расширенный: постоянно растущие цены"),
    ([5, 4, 3, 2, 1], 0, "расширенный: постоянно падающие цены"),
    ([2, 4, 1], 2, "расширенный: минимум в середине"),
    ([2, 1, 2, 0, 1], 1, "расширенный: несколько локальных минимумов/максимумов"),
    ([6, 1, 3, 2, 4, 7], 6, "расширенный: сложный паттерн"),
]

# Граничные тесты
BOUNDARY_CASES = [
    # Граничные по длине массива
    ([1], 0, "граничный: минимальная длина массива (1)"),
    ([1, 2], 1, "граничный: длина массива 2 с прибылью"),
    ([2, 1], 0, "граничный: длина массива 2 без прибыли"),

    # Граничные по значениям цен
    ([0], 0, "граничный: минимальная цена (0)"),
    ([0, 0, 0, 0], 0, "граничный: все цены нулевые"),
    ([10000], 0, "граничный: максимальная цена (10000)"),
    ([0, 10000], 10000, "граничный: от минимальной к максимальной цене"),
    ([10000, 0], 0, "граничный: от максимальной к минимальной цене"),

    # Граничные по паттернам
    ([1] * 100000, 0, "граничный: все одинаковые цены (макс. длина)"),
    (list(range(100000)), 99999, "граничный: постоянно растущие цены (макс. длина)"),
    (list(range(100000, 0, -1)), 0, "граничный: постоянно падающие цены (макс. длина)"),
]

POSITIVE_TEST_CASES = BASIC_CASES + EXTENDED_CASES + BOUNDARY_CASES


class TestBestTimeToBuySell:
    @pytest.mark.parametrize("func", FUNCTIONS)
    @pytest.mark.parametrize("prices,expected,label", POSITIVE_TEST_CASES)
    def test_positive_cases(self, func, prices, expected, label):
        """Проверка корректных случаев"""
        result = func(prices)

        """Проверка, что результат - целое число"""
        assert isinstance(result, int), f"Результат должен быть int, получено {type(result)}"

        """Проверка, что прибыль неотрицательная"""
        assert result >= 0, f"Прибыль не может быть отрицательной, получено {result}"

        """Проверка ожидаемого значения"""
        assert result == expected, f"Ожидалась прибыль {expected}, получено {result} - {label}"
